---
import type {MDXInstance} from 'astro';
import {Frontmatter, KNOWN_FRAMEWORK_CODES} from '../../../../../config';
import {parseWidgetFile} from '../../../../../file';
import WidgetLayout from '../../../../../layouts/WidgetLayout.astro';
import {compareVersionStr} from '../../../../../utils/version';

interface Params {
	widget: string;
	framework: string;
	version?: string | undefined;
}

interface Props {
	page: MDXInstance<Frontmatter>;
	versions: string[];
}

interface StaticPaths {
	params: Params;
	props: Props;
}

export async function getStaticPaths(): Promise<StaticPaths[]> {
	function isNotUndefined<TValue>(
		value: TValue,
	): value is Exclude<TValue, undefined> {
		return value !== undefined;
	}

	const content = await Astro.glob<Frontmatter>(
		'../../../../../content/widgets/**/*.mdx',
	);
	const languageToWidgetToVersionPages: Record<
		string,
		Record<string, [string | undefined, MDXInstance<Frontmatter>][]>
	> = {};

	for (const page of content) {
		const widgetFile = parseWidgetFile(page.file);
		if (widgetFile === undefined) continue;
		const {language, widget, version} = widgetFile;
		const widgetToVersionPages = languageToWidgetToVersionPages[language] ?? {};
		const pages = widgetToVersionPages[widget] ?? [];
		pages.push([version, page]);
		widgetToVersionPages[widget] = pages;
		languageToWidgetToVersionPages[language] = widgetToVersionPages;
	}

	for (const widgetToVersionPages of Object.values(
		languageToWidgetToVersionPages,
	)) {
		for (const versionPages of Object.values(widgetToVersionPages)) {
			versionPages.sort(([a], [b]) => compareVersionStr(a, b));
			const [, latestPage] = versionPages.at(-1)!;
			versionPages.push([undefined, latestPage]);
		}
	}

	return Object.entries(languageToWidgetToVersionPages).flatMap(
		([language, widgetToVersionPages]) =>
			Object.entries(widgetToVersionPages).flatMap(([widget, versionPages]) =>
				KNOWN_FRAMEWORK_CODES.flatMap((framework) =>
					versionPages.map(([version, page]) => ({
						params: {language, widget, framework, version},
						props: {
							page,
							versions: versionPages
								.map(([version]) => version)
								.filter(isNotUndefined),
						},
					})),
				),
			),
	);
}

const {widget, framework} = Astro.params as unknown as Params;
const {page, versions} = Astro.props as Props;
const {file, frontmatter, getHeadings, Content} = page;
---

<WidgetLayout
	file={file}
	frontmatter={frontmatter}
	headings={getHeadings()}
	versions={versions}
>
	<Content widget={widget} framework={framework} versions={versions} />
</WidgetLayout>
