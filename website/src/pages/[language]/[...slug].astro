---
import type {MarkdownInstance} from 'astro';
import type {Frontmatter} from '../../config';
import {parseContentFile} from '../../utils/file';

interface Params {
	slug: string;
}

interface Props {
	page: MarkdownInstance<Frontmatter>;
}

interface StaticPaths {
	params: Params;
	props: Props;
}

export async function getStaticPaths(): Promise<StaticPaths[]> {
	const content = await Astro.glob<Frontmatter>('../../content/**/*.md');

	const languageToSlugPages: Record<
		string,
		[string, MarkdownInstance<Frontmatter>][]
	> = {};

	for (const page of content) {
		const contentFile = parseContentFile(page.file);
		if (contentFile === undefined) continue;
		const pages = languageToSlugPages[contentFile.language] ?? [];
		pages.push([contentFile.slug, page]);
		languageToSlugPages[contentFile.language] = pages;
	}

	return Object.entries(languageToSlugPages).flatMap(([language, slugPages]) =>
		slugPages.map(([slug, page]) => ({
			params: {language, slug},
			props: {page},
		})),
	);
}

const {page} = Astro.props as Props;
const {Content} = page;
---

<Content />
