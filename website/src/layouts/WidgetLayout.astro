---
import Features from '../components/Features.astro';
import FrameworkSelect from '../components/PageContent/FrameworkSelect';
import VersionSelect from '../components/PageContent/VersionSelect';
import MainLayout from './MainLayout.astro';
import path from 'path';
import type {Frontmatter, KNOWN_FRAMEWORK_CODES} from '../config';
import type {MarkdownHeading} from 'astro';
import AdditionalLinks from '../components/PageContent/AdditionalLinks.astro';

interface Props {
	frontmatter: Frontmatter;
	headings: MarkdownHeading[];
	file: string;
	versions: string[];
}

interface Params {
	widget: string;
	framework: typeof KNOWN_FRAMEWORK_CODES[number];
	version?: string;
}

const {widget, framework, version} = Astro.params as unknown as Params;
const {file, frontmatter, versions} = Astro.props;
const {features, mainExample} = frontmatter;
const mainExampleFile =
	mainExample !== undefined ? path.resolve(file, '..', mainExample) : undefined;
const examples = await Astro.glob('../content/**/examples/**/*.astro');
const MainExample = examples.filter(({file}) => file === mainExampleFile)[0]
	?.default;
---

<MainLayout {...Astro.props}>
	<FrameworkSelect client:idle framework={framework} slot="heading-after" />
	{MainExample !== undefined && <MainExample framework={framework} />}
	<div class="grid grid-cols-[3fr_1fr]">
		<section>
			<h3>Features</h3>
			{features !== undefined && <Features features={features} />}
		</section>
		<section class="pt-7 text-sm not-prose flex flex-col gap-1">
			<VersionSelect client:idle currentVersion={version} versions={versions} />
			<AdditionalLinks widget={widget} framework={framework} />
		</section>
	</div>
	<slot />
</MainLayout>
