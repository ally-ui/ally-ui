---
import {parseLanguage} from '../../utils/location';
import {SECTION_LABELS, SIDEBAR_ORDER} from '../../sidebar';
import cx from 'classnames';
import ThemeSwitch from '../Header/ThemeSwitch';
import LanguageSelect from '../Header/LanguageSelect';
import type {MarkdownInstance} from 'astro';
import type {Frontmatter} from '../../config';
import {parseContentFile, parseWidgetFile} from '../../utils/file';

interface Props {
	location: string;
}

const {location} = Astro.props as Props;
const language = parseLanguage(location);
const content = await Astro.glob<MarkdownInstance<Frontmatter>>(
	'../../content/**/*.{md,mdx}',
);

const languageToSlugToPage: Record<
	string,
	Record<string, MarkdownInstance<Frontmatter>>
> = {};
for (const page of content) {
	const contentFile = parseContentFile(page.file) ?? parseWidgetFile(page.file);
	if (contentFile === undefined) continue;
	const slugToPage = languageToSlugToPage[contentFile.language] ?? {};
	slugToPage[contentFile.slug] = page;
	languageToSlugToPage[contentFile.language] = slugToPage;
}

const slugToPage = languageToSlugToPage[language]!;

interface SidebarItem {
	link: string;
	label: string;
}

const sidebar: Record<string, SidebarItem[]> = {};
for (const [section, slugs] of Object.entries(SIDEBAR_ORDER)) {
	const sectionName = SECTION_LABELS[section]![language];
	const items: SidebarItem[] = slugs.map((slug) => ({
		link: `${language}/${slug}`,
		label: slugToPage[slug]!.frontmatter.title,
	}));
	sidebar[sectionName] = items;
}
---

<nav
	aria-labelledby="grid-left"
	id="sidebar"
	class="max-h-screen px-4 py-8 overflow-y-auto wh-full bg-shade sidebar:border-r border-line"
>
	<ul class="text-sm">
		{
			Object.entries(sidebar).map(([section, items]) => (
				<li>
					<details class="group" open>
						<summary class="hover:text-accent hover:bg-shade-100 flex items-center justify-between rounded-full p-2 pl-4 font-medium ring-inset">
							<span>{section}</span>
							<span class="group-open:rotate-90">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="icon icon-tabler icon-tabler-chevron-right"
									width="24"
									height="24"
									viewBox="0 0 24 24"
									stroke-width="2"
									stroke="currentColor"
									fill="none"
									stroke-linecap="round"
									stroke-linejoin="round"
								>
									<path stroke="none" d="M0 0h24v24H0z" fill="none" />
									<polyline points="9 6 15 12 9 18" />
								</svg>
							</span>
						</summary>
						<ul>
							{items.map((item) => {
								return (
									<li>
										<a
											href={Astro.site?.pathname + item.link}
											aria-current={
												location.startsWith('/' + item.link) ? 'page' : false
											}
											class={cx(
												'hover:text-accent hover:bg-shade-100 flex rounded-full px-4 py-2 pl-6 ring-inset',
												location.startsWith('/' + item.link) &&
													'text-accent bg-shade-100',
											)}
										>
											{item.label}
										</a>
									</li>
								);
							})}
						</ul>
					</details>
				</li>
			))
		}
	</ul>
	<div
		class="sticky flex gap-2 p-2 mx-auto mt-4 -mb-4 border rounded-full w-fit flex-center -bottom-4 md:hidden bg-shade border-line"
	>
		<ThemeSwitch client:visible />
		<LanguageSelect language={language} alwaysShowLabel client:visible />
	</div>
</nav>
